@import "./config";
@import "./media-query";

@mixin gridWidth($width) {
  flex: 0 0 percentage($width);
  max-width: percentage($width);
}

@mixin genGridWIdth($type: false) {
  @for $totalIndex from 1 through $gridColumns {
    @for $index from 1 through $totalIndex {
      @if $type {
        .inn-g_#{$type}-#{$index}-#{$totalIndex} {
          @include gridWidth($index / $totalIndex);

          // ios
          body.is-ios & {
            $precent: percentage($index / $totalIndex);

            flex: 0 0 calc(#{$precent} - .5px);
          }
        }
      }
      @else {
        .inn-g_#{$index}-#{$totalIndex} {
          @include gridWidth($index / $totalIndex);

          body.is-ios & {
            $precent: percentage($index / $totalIndex);

            flex: 0 0 calc(#{$precent} - .5px);
          }
        }
      }
    }
  }
}

.inn-container {
  margin-left: auto;
  margin-right: auto;
  padding-left: $gridGutterXs;
  padding-right: $gridGutterXs;

  @include mq(sm) {
    width: $gridWidthSm;
  }


  @include mq(md) {
    width: $gridWidthMd;
  }


  @include mq(lg) {
    width: $gridWidthLg;
    padding-left: $gridGutter;
    padding-right: $gridGutter;
  }


  @include mq(xl) {
    width: $gridWidthXl;
  }
}

.inn-row {
  display: flex;
  flex-wrap: wrap;
  padding-left: 0;
  padding-right: 0;
  margin-left: -$gridGutterXs / 2;
  margin-right: -$gridGutterXs / 2;

  @include mq(lg) {
    margin-left: -$gridGutter / 2;
    margin-right: -$gridGutter / 2;
  }


  &.is-reverse {
    flex-direction: row-reverse;
  }

  & > * {
    width: 100%;
    flex: 0 0 100%;
    max-width: 100%;
    padding-left: $gridGutterXs / 2;
    padding-right: $gridGutterXs / 2;

    @include mq(lg) {
      padding-left: $gridGutter / 2;
      padding-right: $gridGutter / 2;
    }
  }
}

@include genGridWIdth;
@include mq(sm) {
  @include genGridWIdth(sm);
}


@include mq(md) {
  @include genGridWIdth(md);
}


@include mq(lg) {
  @include genGridWIdth(lg);
}


@include mq(xl) {
  @include genGridWIdth(xl);
}
